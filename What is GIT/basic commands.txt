mkdir
ls
ls -a OR ls -Hidden
cd project
rm -rf <fileName>
...............
git init : initialise empty git rpeository on local

 touch names.txt

 git status - shows history of untracked files, staged files, commits

to create a snapshot of changes in your local:
stage->commit->push
git add .           OR  git add 'filename'           OR  git add 'dir  name'             OR git add 'dir  name' 'filename'

 -> git commit -m "blah"

  -> git push

....................
git log           --> to see history of all commits

git reset d4d9fe5e5d42d9845ca3ef21b970026a20ab58421~        
 --> removes all commits made after this commit/resets branch to that particular commit
 -->do not forget to remove '1~' from commit id

 .....................
 git stash
 put all your current changes + staged changes to backstage
should be-uncommited changes
....................
git stash pop 
to bring all stashed changes back
git stsh clear  
to remove all stashed changes [delete]

....................
git remote add origin <github-repo-name>
origin = name of repo

 git remote -v
 details of remote url and name

 git push origin master
 --in above we could use whole url instead of name reference origin
 ..................
 branches:
used for feature separation, bugfixes, uat, production code
never commit on main branch
Create branch - git branch abc
switch to branch - git checkout abc
......
basic touch commands:
vi filename.txt
keypress -> i
enter text etc
keypress -> ESC -> shift+: => type wq (save n Exit), q(save and continue)
....................
merging feature into master branches:
feature branch(with changes) -> a
master branch-> b

- git checkout b
- git merge a 

resolve conflicts within files

- git add .
- git commit -m "resolved conflicts"


